{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12600\viewh14580\viewkind0
\deftab720
\pard\pardeftab720\sl340

\f0\b\fs28 \cf0 \expnd0\expndtw0\kerning0
Union Types for lambda_i (draft)
\b0\fs24 \
\

\b Idea 1
\b0 :\'a0a\'a0term of type A|B can be either be (at run-time) of type A, B or both.\'a0Thus, A | B = A + B + A&B.\
\pard\pardeftab720\sa240

\b \cf0 \expnd0\expndtw0\kerning0
Idea 2
\b0 : intersection types have explicit introduction and implicit elimination; union types (their dual) have implicit introduction and explicit elimination.\'a0Thus, we add a type-case to our language.\'a0 \
\pard\pardeftab720\sl340\sa240
\cf0 \expnd0\expndtw0\kerning0
I haven't considered a bottom type yet.\uc0\u8232 \

\b (**** New definition of\'a0disjointness ****) 
\b0 \
dynamic := union or top type\uc0\u8232 composition := intersection (or bot). \
A * B when A join B is dynamic and\'a0when A meet B is composition \

\b (**** Translation of types ****) 
\b0 \
data Either' a b =\'a0Left a | Right b | Both (a,b) \
|A & B| = A x B\uc0\u8232 |A | B| = Either' |A| |B|\u8232 ... \

\b (**** Sub rules ****) 
\b0 \
base A := A =\'a0Int, Fun, Pair\uc0\u8232 ord-inter A := base A \\/ A = Intersection \
(* I haven't checked whether rules overlap with the old system *) \
A <: B ~> c\uc0\u8232 A /<: C \'a0 (A is not a subtype of C)\u8232 ord-inter A\u8232 ---------------------------\u8232 A <: B|C ~> \\x. Left (c x) \
A <: C ~> c\uc0\u8232 A /<: B \'a0\'a0(A is not a subtype of B)\u8232 ord-inter A\u8232 -----------------------------\u8232 A <: B|C ~> \\x. Right (c x) \
A <: C ~> c1\uc0\u8232 A <: D ~> c2\u8232 ord-inter A\u8232 --------------------------------------\u8232 A <: C|D ~> \\x. Both (c1 x, c2 x) \
A <: C ~> c1\uc0\u8232 B <: C ~> c2\u8232 A & B <: C ~> c3\u8232 ----------------------------------\u8232 A|B <: C ~>\u8232 \'a0 \\x. case x of\u8232 \'a0\'a0\'a0 Left x -> c1 x\u8232 \'a0\'a0\'a0 Right x -> c2 x\u8232 \'a0\'a0\'a0 Both x -> c3 x \

\b (**** Example derivations ****) 
\b0 \
\pard\pardeftab720\sl340\sa240
\cf0 \expnd0\expndtw0\kerning0
(**) :: ((a,b) -> c) -> ((a,b) -> d) -> (a,b) -> (c,d)\expnd0\expndtw0\kerning0
\
Int & Char <: Char ~> id . snd\uc0\u8232 Int & Char <: Int ~> id . fst\u8232 ---------------------------\u8232 Int & Char <: Char | Int ~>\'a0Both . ((id . fst) ** (id . snd))\u8232 \
Int & Bool & Char <: Bool ~> c2\uc0\u8232 -------------------------------\u8232 Int & Bool & Char <: Int ~> c1\u8232 Int & Bool & Char <: String | Bool\'a0~> Right . c2\u8232 --------------------------------------------------------------------------\u8232 Int & Bool & Char <: Int | String | Bool ~> Both . (c1 ** (Right . c2))\u8232 \
Int <: Bool | String | Int ~>\'a0Right . Right . id \'a0 (c1)\uc0\u8232 String <: Bool | String | Int ~>\'a0Right . Left . id \'a0 (c2)\u8232 Int & String <: Bool | String | Int ~>\'a0Right . Both . ((id . snd) ** (id . fst)) \'a0 (c3)\u8232 ---------------------------------------\u8232 Int | String <: Bool | String | Int ~>\u8232 \'a0 case x of\u8232 \'a0\'a0\'a0 Left x -> c1 x\u8232 \'a0\'a0\'a0 Right x -> c2 x\u8232 \'a0\'a0\'a0 Both x -> c3 x \
\pard\pardeftab720\sl340\sa240

\b \cf0 (*** Syntax/Typing of tcase ***) 
\b0 \
Syntax (match the type of expression e and let x be bound to that exp):\uc0\u8232 tcase e as x of\u8232 \'a0 A -> e1\u8232 \'a0 B -> e2\u8232 \'a0 A & B -> e3 \
G |- e : A | B ~> c\uc0\u8232 G[x : A] |- e1 : C ~> c1\u8232 G[x : B] |- e2 : C ~> c2\u8232 G[x : A & B] |- e3 : C ~> c3\u8232 -----------------------------------------------------------\u8232 \'a0 \'a0 \'a0 \'a0tcase e as x of                      \expnd0\expndtw0\kerning0
case c of\expnd0\expndtw0\kerning0
\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 A -> e1                             \expnd0\expndtw0\kerning0
\'a0\'a0 Left x -> c1\expnd0\expndtw0\kerning0
\uc0\u8232 G |-\'a0 \'a0 B -> e2\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 : C ~>      \expnd0\expndtw0\kerning0
Right x -> c2\expnd0\expndtw0\kerning0
\uc0\u8232 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 A & B -> e3                        \expnd0\expndtw0\kerning0
Both x -> c3 \expnd0\expndtw0\kerning0
\

\b (**** Example of translation ****) 
\b0 \
let e = 3,,'c' : Int | Char\uc0\u8232 in tcase e as x of\u8232 \'a0\'a0\'a0 Int -> |x|+1\u8232 \'a0\'a0\'a0 Char -> -1\u8232 \'a0\'a0\'a0 Int & Char -> x : Int + x : Int \
let e = Both (id (fst (\expnd0\expndtw0\kerning0
3,,\'92c\'92))\expnd0\expndtw0\kerning0
, id (snd (3,,\'92c\'92)))\uc0\u8232 in case e of\u8232 \'a0\'a0\'a0 Left x -> |x|+1\u8232 \'a0\'a0\'a0 Right x -> -1\u8232 \'a0\'a0\'a0 Both x -> fst x + fst x \

\b (**** Still missing ****)
\b0 \uc0\u8232 1. Examples of new disjointness\u8232 2. Better alternative for the tcase syntax/typing? (i.e. using the style of\'a0Dunfield)\u8232 3. Integration of rules w/ original system\u8232 4. ... (what else?) \
}